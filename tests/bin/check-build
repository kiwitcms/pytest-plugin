#!/bin/bash

# Build packages for distribution on PyPI
# and execute some sanity checks on them
#
# note: must be executed from the root directory of the project

# first clean up the local environment
echo "..... Clean up first"
find . -type f -name '*.pyc' -delete
find . -type d -name __pycache__ -delete
find . -type d -name '*.egg-info' | xargs rm -rf
rm -rf build/ .cache/ dist/ .eggs/ .tox/ .venv/


# then build the packages
echo "..... Building PyPI packages"
set -e
$(which python) setup.py sdist >/dev/null
$(which python) setup.py bdist_wheel >/dev/null
set +e

# check rst formatting of README
echo "..... Check rst formatting for PyPI"
twine check dist/* || exit 1

# then run some sanity tests
echo "..... Searching for .pyc files inside the built packages"
matched_files=`tar -tvf dist/*.tar.gz | grep -c "\.pyc"`
if [ "$matched_files" -gt "0" ]; then
    echo "ERROR: .pyc files found in .tar.gz package"
    exit 1
fi

matched_files=`unzip -t dist/*.whl | grep -c "\.pyc"`
if [ "$matched_files" -gt "0" ]; then
    echo "ERROR: .pyc files found in wheel package"
    exit 1
fi

# exit on error from now on
set -e

echo "..... Trying to install the new tarball inside a virtualenv"
$(which python) -m venv .venv/test-tarball
source .venv/test-tarball/bin/activate
pip install --upgrade setuptools pip
pip install --no-binary :all: -f dist/ kiwitcms-pytest-plugin
pip freeze | grep kiwitcms-pytest-plugin
deactivate
rm -rf .venv/

echo "..... Trying to install the new wheel inside a virtualenv"
$(which python) -m venv .venv/test-wheel
source .venv/test-wheel/bin/activate
pip install --upgrade setuptools pip
pip install --only-binary :all: -f dist/ kiwitcms-pytest-plugin
pip freeze | grep kiwitcms-pytest-plugin
deactivate
rm -rf .venv/

echo "..... PASS"
